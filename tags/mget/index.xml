<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>mget on ყųʂƙąɱ</title>
		<link>https://yusbk.github.io/tags/mget/</link>
		<description>Recent content in mget </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>en</language>
		
		<managingEditor>Page(/tags/mget) (Yusman Kamaleri)</managingEditor>
    	
  		<lastBuildDate>Thu, 04 Jan 2018 00:00:00 +0000</lastBuildDate>
		
		<atom:link href="/tags/mget/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Case when</title>
			<link>https://yusbk.github.io/2020/10/07/case-when/</link>
			<pubDate>Wed, 07 Oct 2020 22:58:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/10/07/case-when/</guid>
			<description>It&amp;rsquo;s often easier to use ifelse to implement conditioning. The fast implementation in data.table of ifelse is fifelse. Other approach to do multiple conditioning is to use data.table::fcase or dplyr::case_when.
fcase fcase can be used directly
x &amp;lt;- 1:6 data.table::fcase(x &amp;lt; 3, 1, x &amp;gt;= 4, 2) To implement in a data.</description>
		</item>
      	
		<item>
			<title>Connect to MS Access DB</title>
			<link>https://yusbk.github.io/2020/10/02/access-db/</link>
			<pubDate>Fri, 02 Oct 2020 12:49:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/10/02/access-db/</guid>
			<description>Before connecting to your Access DBMS via Windows OS, you can check if you have the MS Access driver installed in your machine by running
## List everything odbc::odbcListDrivers() ## You will get the results someting like this.. ## ... truncated 26 Microsoft Access Driver (*.</description>
		</item>
      	
		<item>
			<title>SSH-key with Git on Windows</title>
			<link>https://yusbk.github.io/2020/09/29/git-ssh/</link>
			<pubDate>Tue, 29 Sep 2020 00:00:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/09/29/git-ssh/</guid>
			<description>Generally, these are what I did:
 Install git-with-openssh Create SSH-key Add SSH-key to ssh-agent Create ~/.bashrc for auto-launching ssh-agent  openSSH Windows 10 include openSSH. But I can&amp;rsquo;t make it work with git so I use git-with-openssh installed via scoop.</description>
		</item>
      	
		<item>
			<title>Multiple account</title>
			<link>https://yusbk.github.io/2020/09/28/git-account/</link>
			<pubDate>Mon, 28 Sep 2020 00:00:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/09/28/git-account/</guid>
			<description>config file Create a config file in your ~/.ssh folder that will manage your accounts.
Host personal HostName github.com User git IdentityFile ~/.ssh/id_rsa_personal Host work HostName github.com User git IdentityFile ~/.ssh/id_rsa_work When cloning a new repo then you only have to specify hostname to your Git account.</description>
		</item>
      	
		<item>
			<title>git submodule</title>
			<link>https://yusbk.github.io/2020/09/27/git-submodule/</link>
			<pubDate>Sun, 27 Sep 2020 00:00:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/09/27/git-submodule/</guid>
			<description>Rujukan di sini lebih teratur. Penerangan dibawah ialah berasaskan pengalaman sendiri tanpa struktur.
Repo baru Bila buat repo baru dan ingin tetapkan submodule untuk tema harbor dan folder public ke yusbk.github.io. Submodule dipakai untuk memasukkan fungsi yang terdapat di repos lain ke dalam repos sendiri ie.</description>
		</item>
      	
		<item>
			<title>Basic use of drake</title>
			<link>https://yusbk.github.io/2020/06/15/basic-drake/</link>
			<pubDate>Mon, 15 Jun 2020 23:22:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/06/15/basic-drake/</guid>
			<description>There are various ways to organise your R workflow. If you are working with a big project, then Airflow might be for you. But for the majority of R project codes, drake package will fullfilled your need.
Here is the basic use of drake.</description>
		</item>
      	
		<item>
			<title>git fork</title>
			<link>https://yusbk.github.io/2020/06/14/git-fork/</link>
			<pubDate>Sun, 14 Jun 2020 00:00:00 +0200</pubDate>
			<guid>https://yusbk.github.io/2020/06/14/git-fork/</guid>
			<description>This is just 100% a copy from gist so I can check it when needed.
So you&amp;rsquo;ve cloned somebody&amp;rsquo;s repo from github, but now you want to fork it and contribute back. Never fear!
Technically, when you fork &amp;ldquo;origin&amp;rdquo; should be your fork and &amp;ldquo;upstream&amp;rdquo; should be the project you forked; however, if you&amp;rsquo;re willing to break this convention then it&amp;rsquo;s easy.</description>
		</item>
      	
		<item>
			<title>Pemakaian lookup table</title>
			<link>https://yusbk.github.io/2020/02/09/look-up-table/</link>
			<pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
			<guid>https://yusbk.github.io/2020/02/09/look-up-table/</guid>
			<description>Lookup table dipakai untuk mempercepatkan proses dan mengelakkan pemakaian ifelse. Untuk mempercepatkan proses, ordered index untuk data.table harus dipakai.
Cara 1 Cara ini ialah untuk mendapakan nilai ScoreLU yang terdapat di dataset dt2 melalui kolom kekunci DSCRpd dikedua-dua data.table. Sekiranya nilai di DSCRpd di dt1 tidak sama dengan dt2, nilai yang berhampiran di DSCRpd dirujuk untuk mendapatkan nilai ScoreLU.</description>
		</item>
      	
		<item>
			<title>Pasang pakej di R</title>
			<link>https://yusbk.github.io/2019/09/02/package-r/</link>
			<pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
			<guid>https://yusbk.github.io/2019/09/02/package-r/</guid>
			<description>Ini ialah beberapa penggunaan asas R yang amat berguna walaupun jarang dipakai. Antaranya:
Pasang pakej Cara biasa untuk pasang pakej ialah menggunakan install.packages(). Tetapi sekiranya ingin memasang banyak pekej secara serentank dan memuatkan di R setelah pakej dipasang, cara begini boleh dipakai:</description>
		</item>
      	
		<item>
			<title>Padamkan barisan (row)</title>
			<link>https://yusbk.github.io/2019/08/21/row-delete/</link>
			<pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
			<guid>https://yusbk.github.io/2019/08/21/row-delete/</guid>
			<description>Untuk memadamkan barisan di data.table menggunakan reference seperti penggunaan .SD masih belum dilaksanakan. Cara ini diambil dari perbincangan di GitHub data.table. Fungsi delete dibuat seperti begini:
delete &amp;lt;- function(DT, del.idxs) { # pls note &amp;#39;del.idxs&amp;#39; vs. &amp;#39;keep.idxs&amp;#39; keep.idxs &amp;lt;- setdiff(DT[, .</description>
		</item>
      	
	</channel>
</rss>
